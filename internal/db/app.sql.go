// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: app.sql

package db

import (
	"context"
	"database/sql"
)

const createApp = `-- name: CreateApp :exec
INSERT INTO app (a, b, c) VALUES (?1, ?2, ?3)
`

type CreateAppParams struct {
	A string
	B string
	C sql.NullString
}

func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) error {
	_, err := q.db.ExecContext(ctx, createApp, arg.A, arg.B, arg.C)
	return err
}

const getApp = `-- name: GetApp :one
SELECT id, a, b, c FROM app WHERE id = ?1
`

func (q *Queries) GetApp(ctx context.Context, id int64) (App, error) {
	row := q.db.QueryRowContext(ctx, getApp, id)
	var i App
	err := row.Scan(
		&i.ID,
		&i.A,
		&i.B,
		&i.C,
	)
	return i, err
}

const listApps = `-- name: ListApps :many
SELECT id, a, b, c FROM app
`

func (q *Queries) ListApps(ctx context.Context) ([]App, error) {
	rows, err := q.db.QueryContext(ctx, listApps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []App
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.A,
			&i.B,
			&i.C,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
